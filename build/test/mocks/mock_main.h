/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MAIN_H
#define _MOCK_MAIN_H

#include "unity.h"
#include "main.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_main_Init(void);
void mock_main_Destroy(void);
void mock_main_Verify(void);




#define USART_init_Ignore() USART_init_CMockIgnore()
void USART_init_CMockIgnore(void);
#define USART_init_StopIgnore() USART_init_CMockStopIgnore()
void USART_init_CMockStopIgnore(void);
#define USART_init_Expect() USART_init_CMockExpect(__LINE__)
void USART_init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_USART_init_CALLBACK)(int cmock_num_calls);
void USART_init_AddCallback(CMOCK_USART_init_CALLBACK Callback);
void USART_init_Stub(CMOCK_USART_init_CALLBACK Callback);
#define USART_init_StubWithCallback USART_init_Stub
#define statusLED_Ignore() statusLED_CMockIgnore()
void statusLED_CMockIgnore(void);
#define statusLED_StopIgnore() statusLED_CMockStopIgnore()
void statusLED_CMockStopIgnore(void);
#define statusLED_Expect(onoff) statusLED_CMockExpect(__LINE__, onoff)
void statusLED_CMockExpect(UNITY_LINE_TYPE cmock_line, int onoff);
typedef void (* CMOCK_statusLED_CALLBACK)(int onoff, int cmock_num_calls);
void statusLED_AddCallback(CMOCK_statusLED_CALLBACK Callback);
void statusLED_Stub(CMOCK_statusLED_CALLBACK Callback);
#define statusLED_StubWithCallback statusLED_Stub
#define GPIO_init_Ignore() GPIO_init_CMockIgnore()
void GPIO_init_CMockIgnore(void);
#define GPIO_init_StopIgnore() GPIO_init_CMockStopIgnore()
void GPIO_init_CMockStopIgnore(void);
#define GPIO_init_Expect() GPIO_init_CMockExpect(__LINE__)
void GPIO_init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_GPIO_init_CALLBACK)(int cmock_num_calls);
void GPIO_init_AddCallback(CMOCK_GPIO_init_CALLBACK Callback);
void GPIO_init_Stub(CMOCK_GPIO_init_CALLBACK Callback);
#define GPIO_init_StubWithCallback GPIO_init_Stub
#define USART_write_Ignore() USART_write_CMockIgnore()
void USART_write_CMockIgnore(void);
#define USART_write_StopIgnore() USART_write_CMockStopIgnore()
void USART_write_CMockStopIgnore(void);
#define USART_write_Expect(ch) USART_write_CMockExpect(__LINE__, ch)
void USART_write_CMockExpect(UNITY_LINE_TYPE cmock_line, int ch);
typedef void (* CMOCK_USART_write_CALLBACK)(int ch, int cmock_num_calls);
void USART_write_AddCallback(CMOCK_USART_write_CALLBACK Callback);
void USART_write_Stub(CMOCK_USART_write_CALLBACK Callback);
#define USART_write_StubWithCallback USART_write_Stub
#define USART_read_IgnoreAndReturn(cmock_retval) USART_read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void USART_read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char cmock_to_return);
#define USART_read_StopIgnore() USART_read_CMockStopIgnore()
void USART_read_CMockStopIgnore(void);
#define USART_read_ExpectAndReturn(cmock_retval) USART_read_CMockExpectAndReturn(__LINE__, cmock_retval)
void USART_read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char cmock_to_return);
typedef char (* CMOCK_USART_read_CALLBACK)(int cmock_num_calls);
void USART_read_AddCallback(CMOCK_USART_read_CALLBACK Callback);
void USART_read_Stub(CMOCK_USART_read_CALLBACK Callback);
#define USART_read_StubWithCallback USART_read_Stub
#define printMenu_IgnoreAndReturn(cmock_retval) printMenu_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void printMenu_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define printMenu_StopIgnore() printMenu_CMockStopIgnore()
void printMenu_CMockStopIgnore(void);
#define printMenu_ExpectAndReturn(cmock_retval) printMenu_CMockExpectAndReturn(__LINE__, cmock_retval)
void printMenu_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
typedef char* (* CMOCK_printMenu_CALLBACK)(int cmock_num_calls);
void printMenu_AddCallback(CMOCK_printMenu_CALLBACK Callback);
void printMenu_Stub(CMOCK_printMenu_CALLBACK Callback);
#define printMenu_StubWithCallback printMenu_Stub
#define USART_write_string_Ignore() USART_write_string_CMockIgnore()
void USART_write_string_CMockIgnore(void);
#define USART_write_string_StopIgnore() USART_write_string_CMockStopIgnore()
void USART_write_string_CMockStopIgnore(void);
#define USART_write_string_Expect(charString) USART_write_string_CMockExpect(__LINE__, charString)
void USART_write_string_CMockExpect(UNITY_LINE_TYPE cmock_line, char* charString);
typedef void (* CMOCK_USART_write_string_CALLBACK)(char* charString, int cmock_num_calls);
void USART_write_string_AddCallback(CMOCK_USART_write_string_CALLBACK Callback);
void USART_write_string_Stub(CMOCK_USART_write_string_CALLBACK Callback);
#define USART_write_string_StubWithCallback USART_write_string_Stub
#define Error_Handler_Ignore() Error_Handler_CMockIgnore()
void Error_Handler_CMockIgnore(void);
#define Error_Handler_StopIgnore() Error_Handler_CMockStopIgnore()
void Error_Handler_CMockStopIgnore(void);
#define Error_Handler_Expect() Error_Handler_CMockExpect(__LINE__)
void Error_Handler_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_Error_Handler_CALLBACK)(int cmock_num_calls);
void Error_Handler_AddCallback(CMOCK_Error_Handler_CALLBACK Callback);
void Error_Handler_Stub(CMOCK_Error_Handler_CALLBACK Callback);
#define Error_Handler_StubWithCallback Error_Handler_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
